func CopySM(src *StateMachine) (dest *StateMachine){		//Channels are not copied but flushed
	dest = new(StateMachine)
	*dest = *src	//copies all primitive data types
	//For slices and maps
	dest.peers = make([]uint64,len(src.peers))
	copy(dest.peers,src.peers)

	dest.log = make([]LogEntry,len(src.log))
	copy(dest.log,src.log)

	dest.nextIndex = make([]uint64,len(src.nextIndex))
	copy(dest.nextIndex,src.nextIndex)

	dest.matchIndex = make([]uint64,len(src.matchIndex))
	copy(dest.matchIndex,src.matchIndex)

	dest.peerIndex = make(map[uint64]int)
	for k, v := range src.peerIndex {
	    dest.peerIndex[k] = v
	}
	dest.actionChan = make(chan Action,1000)
	dest.eventChan = make(chan Event,1000)
	dest.processMutex = make(chan int,1)
	dest.processMutex <- 1
	return dest
}


func DumpPkgManager(){
	fmt.Println("Dump")
	reflect.DeepEqual(1,1)
	time.Sleep(1*time.Millisecond)
}


/*
func TestInitialization(t *testing.T) {
	sm := InitStateMachine(uint64(10), []uint64{20,30,40,50}, uint64(3), time.Duration(500)*time.Millisecond, time.Duration(200)*time.Millisecond, uint64(1), uint64(0), []LogEntry{LogEntry{0,0,nil,false}})

	checkEquals(t,sm.id,uint64(10))
	checkEquals(t,sm.peers,[]uint64{20,30,40,50})
	checkEquals(t,sm.majority,uint64(3))

	sm.electionTimeout = electionTimeout
	sm.heartbeatTimeout = heartbeatTimeout
	//Persistent
	sm.currentTerm = currentTerm
	sm.votedFor = votedFor
	sm.log = make([]LogEntry, len(log))
	copy(sm.log, log)
	//Volatile
	sm.state = FOLLOWER
	sm.leaderId = 0
	sm.logIndex = uint64(len(sm.log))
	sm.commitIndex = 0
	sm.nextIndex = make([]uint64,len(sm.peers))
	sm.matchIndex = make([]uint64,len(sm.peers))
	sm.voteCount = 0
	sm.peerIndex = make(map[uint64]int)
	for i := range sm.peers {
		sm.peerIndex[sm.peers[i]] = i
	}
	sm.stop = true
	sm.actionChan = make(chan Action,1000)
	sm.eventChan = make(chan Event,1000)
	sm.processMutex = make(chan int,1)
	sm.processMutex <- 1

}
*/

/*
func GetAlarm() (Action){
	return CreateAction("Alarm","t",time.Duration(500)*time.Millisecond)
}
*/


//-------------------------------------

//--------------------DRIVER----------------
/*
func PerformActions(sm *StateMachine) {
	for {
fmt.Println("Action:")
		select {
		case a := <- sm.actionChan :
			fmt.Println(a)
			switch a.name {
				case "Append":
			}

		case <- time.After(2*time.Second):
			break
		}
	}
}
*/
//------------------END DRIVER--------------

/*
func checkEquals(t *testing.T,a,b interface{}) {
	if !reflect.DeepEqual(a,b) {
		t.Error("Mismatch :",a,b)
	}
}


//----------------------TOTAL DUMP----------------
/*
func TestFollowerVoteReq(t *testing.T) {
	sm := GetFollower
	eventChan := *sm.GetEventChannel()
	actionChan := *sm.GetActionChannel()
	term := sm.currentTerm
	eventChan <- CreateEvent("VoteReq", "term",sm.currentTerm, "candidateId",uint64(50), "lastLogIndex",sm.logIndex+1, "lastLogTerm",sm.currentTerm-1)
	time.Sleep(2*time.Millisecond) //wait for events to get processed
	//Go to follower mode and vote
	if sm.state!=FOLLOWER {
		t.Error("Invalid mode\n")
	} 
	//Current term must remain same
	if sm.currentTerm!= term {
		t.Error("Mismatch in currentTerm\n")
	}
	c1,c2,c3:=0,0,0
	loop:
	for {
		select {
		case a := <- actionChan :
			//fmt.Println(a)
			if a.name=="Alarm" {
				c1++
			} else if a.name=="SaveVotedFor"{
				c2++
			} else if a.name=="Send"{
				c3++
			} else {
				t.Error("Invalid Action\n")
			}
		case <- time.After(100*time.Millisecond):
			break loop
		}
	}
	if c1!=1 { //One due to sm.Start() 
		t.Error("Alarm count Mismatch\n")
	}
	if c2!=1 { //Save votedFor
		t.Error("Problem saving votedFor\n")
	}
	if c3!=1 { //Send vote resp
		t.Error("Send VoteResp count Mismatch\n")
	}
	//imageXX = CopySM(sm)
	sm.Stop()

	//Try same again with higher term
	sm = CopySM(image2)		//SM candidate in backoff mode
	sm.Start()
	eventChan = *sm.GetEventChannel()
	actionChan = *sm.GetActionChannel()
	term = sm.currentTerm
	eventChan <- CreateEvent("VoteReq", "term",sm.currentTerm+2, "candidateId",uint64(50), "lastLogIndex",sm.logIndex+1, "lastLogTerm",sm.currentTerm-1)
	time.Sleep(2*time.Millisecond) //wait for events to get processed
	//Go to follower mode and vote for
	if sm.state!=FOLLOWER {
		t.Error("Invalid mode\n")
	} 
	//Current term must be updated and saved
	if sm.currentTerm!= term+2 {
		t.Error("Mismatch in currentTerm\n")
	}
	c1,c2,c3,c4 := 0,0,0,0
	loop2:
	for {
		select {
		case a := <- actionChan :
			//fmt.Println(a)
			if a.name=="Alarm" {
				c1++
			} else if a.name=="SaveVotedFor"{
				c2++
			} else if a.name=="SaveCurrentTerm"{
				c4++
			} else if a.name=="Send"{
				c3++
			} else {
				t.Error("Invalid Action\n")
			}
		case <- time.After(100*time.Millisecond):
			break loop2
		}
	}
	if c1!=1 { //One due to sm.Start() 
		t.Error("Alarm count Mismatch\n")
	}
	if c2!=2 { //Reset + Save voted for 
		t.Error("Problem saving votedFor\n")
	}
	if c3!=1 { //send vote resp
		t.Error("Send VoteResp count Mismatch\n")
	}
	if c4!=1 { //Save current term
		t.Error("Problem saving current term\n")
	}
	//imageXX = CopySM(sm)
	sm.Stop()


	//Try same again with lower term
sm = CopySM(image2)		//SM candidate in backoff mode
	sm.Start()
	eventChan = *sm.GetEventChannel()
	actionChan = *sm.GetActionChannel()
	term = sm.currentTerm
	eventChan <- CreateEvent("VoteReq", "term",sm.currentTerm-1, "candidateId",uint64(50), "lastLogIndex",sm.logIndex+1, "lastLogTerm",sm.currentTerm-1)
	time.Sleep(2*time.Millisecond) //wait for events to get processed
	//No change in Current term
	if sm.currentTerm!= term {
		t.Error("Mismatch in currentTerm\n")
	}
	c1,c2 = 0,0
	loop3:
	for {
		select {
		case a := <- actionChan :
			//fmt.Println(a)
			if a.name=="Alarm" {
				c1++
			} else if a.name=="Send"{
				c2++
			} else {
				t.Error("Invalid Action\n")
			}
		case <- time.After(100*time.Millisecond):
			break loop3
		}
	}
	if c1!=1 { //One due to sm.Start() 
		t.Error("Alarm count Mismatch\n")
	}
	if c2!=1 { //send negative vote resp
		t.Error("Send VoteResp count Mismatch\n")
	}
	//imageXX = CopySM(sm)
	sm.Stop()
}
*/

/* //---------------------Depricated------------------
func TestCandidateBackoffTimeout(t *testing.T) {
	sm = CopySM(image2)		//SM candidate in backoff mode
	sm.Start()
	eventChan := *sm.GetEventChannel()
	actionChan := *sm.GetActionChannel()
	term := sm.currentTerm
	eventChan <- CreateEvent("Timeout")
	time.Sleep(2*time.Millisecond) //wait for events to get processed
	//Restart election
	if sm.state!=CANDIDATE {
		t.Error("Invalid mode\n")
	} 
	//Current term must be incremented and saved
	if sm.currentTerm!= term+1 {
		t.Error("Mismatch in currentTerm\n")
	}
	//ask for votes and set election timeout
	c1,c2,c3:=0,0,0
	loop:
	for {
		select {
		case a := <- actionChan :
			//fmt.Println(a)
			if a.name=="Alarm" {
				c1++
			} else if a.name=="SaveState"{
				c2++
			} else if a.name=="Send"{
				c3++
			} else {
				t.Error("Invalid Action\n")
			}
		case <- time.After(100*time.Millisecond):
			break loop
		}
	}
	if c1!=2 { //One due to sm.Start() + Election timeout alarm
		t.Error("Alarm count Mismatch\n")
	}
	if c2!=1 { //Save current term
		t.Error("Problem saving current term\n")
	}
	if c3!=4 { //Request for vote in new term
		t.Error("Send VoteReq count Mismatch\n")
	}
	//imageXX = CopySM(sm)
	sm.Stop()
}
*/

